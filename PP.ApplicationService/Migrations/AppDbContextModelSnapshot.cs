// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PP.ApplicationService.Data;

#nullable disable

namespace PP.ApplicationService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PP.ApplicationService.Models.DbEntities.AppConfiguration", b =>
                {
                    b.Property<int>("AppConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppConfigId"));

                    b.Property<string>("AppConfigJson")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("AppId")
                        .HasColumnType("integer");

                    b.HasKey("AppConfigId");

                    b.ToTable("AppConfiguration", (string)null);
                });

            modelBuilder.Entity("PP.ApplicationService.Models.DbEntities.AppDataBases", b =>
                {
                    b.Property<int>("DBId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DBId"));

                    b.Property<string>("DBName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("DBId");

                    b.ToTable("AppDataBases", (string)null);
                });

            modelBuilder.Entity("PP.ApplicationService.Models.DbEntities.AppDbMapping", b =>
                {
                    b.Property<int>("AppDBId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppDBId"));

                    b.Property<int>("AppId")
                        .HasColumnType("integer");

                    b.Property<int>("DbId")
                        .HasColumnType("integer");

                    b.HasKey("AppDBId");

                    b.HasIndex("DbId");

                    b.ToTable("AppDbMapping", (string)null);
                });

            modelBuilder.Entity("PP.ApplicationService.Models.DbEntities.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Application", (string)null);
                });

            modelBuilder.Entity("PP.ApplicationService.Models.DbEntities.AppDbMapping", b =>
                {
                    b.HasOne("PP.ApplicationService.Models.DbEntities.AppDataBases", "AppDataBases")
                        .WithMany()
                        .HasForeignKey("DbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppDataBases");
                });
#pragma warning restore 612, 618
        }
    }
}
